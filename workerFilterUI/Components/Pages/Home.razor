@page "/"
@layout EmptyLayout
@using workerFilterAPI.Models
@using workerFilterUI.Components.Layout
@using workerFilterUI.Components.Services
@inject IWorkerServices workerServices





<head>
    <style>

        .item1 { grid-area: header; }
        .item2 { grid-area: menu;
        }
        .item3 { grid-area: main;
        background-color:aliceblue;
        grid-row:2/6;}


        .grid-container {
            display: grid;
            grid-template-areas:
                'header header header header header header'
                'menu menu main main main main'
                'menu menu main main main main';
                gap:10px;
            paddding: 10px;
        }

        img{border: 5px solid #555}
    </style>
</head>
<body>
    <div class="grid-container" style="width:auto" >
        <div class="item1">
            <h3 class="container" style="background-color:cadetblue; text-align:center">Arbeiterfilter</h3>
        </div>
        <div class="item2" style="width:30%; align-content:center; margin-left:15%">
            

            @if (allCountries == null)
            {
                <p>es lädt...</p>
            }
            else
            {

                <EditForm Model="@allCountries">
                    <h5 style="text-align:justify">Land</h5>
                    <InputSelect class="form-select" bind-value="filteredInfo" @onchange=Filtrieren
                                       ValueChanged="@((int value) => SelectCountryId(value))"
                                       ValueExpression="@(() => coid)"
                                       Value="coid">

                        <option value="0" bind-:after="Filtrieren">alle</option>
                        @if (coid == 0)
                        {
                            countryid = 0;

                        }

                        @foreach (var country in allCountries)
                        {
                            <option value="@country.CountryId"> @country.CountryName </option>
                            @if (country.CountryId == coid)
                            {
                                countryid = country.CountryId;
                            }
                        }


                    </InputSelect>
                </EditForm>

                <EditForm Model="allCities">
                    <h5 style="text-align:justify">Stadt</h5>
                    <InputSelect class="form-select" bind-value="filteredInfo"
                                 ValueChanged="@((int value) => SelectCityId(value))"
                                 ValueExpression="@(() => ciid)"
                                 Value="ciid">

                        <option value="0">alle</option>
                        @if (ciid == 0)
                        {
                            cityid = 0;

                        }

                        @foreach (var city in allCities)
                        {
                            <option value="@city.CityId">@city.CityName</option>
                            @if (city.CityId == ciid)
                            {
                                cityid = city.CityId;
                            }
                        }

                    </InputSelect>
                </EditForm>

                <EditForm Model="allProfessions">
                    <h5 style="text-align:justify">Beruf</h5>
                    <InputSelect class="form-select" bind-value="filteredInfo"
                                 ValueChanged="@((int value) => SelectProfessionId(value))"
                                 ValueExpression="@(() => profid)"
                                 Value="profid">

                        <option value="0">alle</option>
                        @if (profid == 0)
                        {
                            professionid = 0;

                        }

                        @foreach (var prof in allProfessions)
                        {
                            <option value="@prof.ProfessionId">@prof.ProfessionName</option>
                            @if (prof.ProfessionId == profid)
                            {
                                professionid = prof.ProfessionId;

                            }
                        }

                    </InputSelect>
                </EditForm>
                <br />
                <button class="button" style="background-color:gainsboro" @onclick="Filtrieren">Filtrieren</button>
            }
   
        </div>
        @*        GRID *@
        <div class="container" style="margin-left:15%">

            <Grid @ref="grid" TItem="Worker"
                  Class="table table-hover table-bordered table-striped"
                  DataProvider="DataProvider"
                  AllowSelection="true"
                  SelectionMode="GridSelectionMode.Single"
                  SelectedItemsChanged="OnSelectedItemsChanged"
                  Responsive="true">


                <GridColumn TItem="Worker" HeaderText="First Name" PropertyName="First Name" SortKeySelector="item => item.FirstName">@context.FirstName</GridColumn>
                <GridColumn TItem="Worker" HeaderText="Last Name" PropertyName="First Name" SortKeySelector="item => item.LastName"> @context.LastName</GridColumn>
            </Grid>

            <div>
                <ul>
                    @if (selectedWorker is not null)
                    {
                        @foreach (var item in selectedWorker)
                        {
                            var id = item.WorkerId;
                            WorkerPerId(id);
                        }
                    }
                </ul>
            </div>

        </div>

        <div class="item3 ">
            <h3 style="text-align:center">MitarbeiterInfo</h3>
            <div style="padding:10%; float:left; text-align:justify">

            @foreach (var worker in selectedWorker)
            {
                var id = worker.WorkerId;
@*                     var profid = worker.Conjuctions.Where(x => x.WorkerId == id).Select(y => y.ProfessionId).FirstOrDefault(); *@


                <h4>Name: @worker.FirstName</h4>
                <h4>Nachname: @worker.LastName</h4>
                <h4>Geschlecht: @worker.Gender</h4>
                <h4>Alter: @worker.Age</h4>
                <h4>Emailadresse: @worker.Email</h4>
@*                 <h4>Beruf: @profid</h4> *@

                <div style="padding: 10px; float:right;text-align:justify">
                        @* <img style="padding: 10px; float:right" src="https://www.pexels.com/de-de/foto/@worker.UrlBild"> *@
                        <img style="padding: 10px; float:right; text-align=center" width="500" height="500"  src="Images/@worker.UrlBild">

                </div>

            }
            </div>
            <br />
            <br />

        </div>

    </div>
</body>
<footer>
    <h3 style="margin-left:10%">made by: Mauricio Serrano</h3>
    <h4 style="margin-left:10%"> maserranoh@gmx.at</h4>
</footer>

<br />


@code{
    private IEnumerable<Worker>? filteredInfo { get; set; }
    private IEnumerable<Country>? allCountries { get; set; }
    private IEnumerable<City>? allCities { get; set; }
    private IEnumerable<Profession>? allProfessions { get; set; }
    private HashSet<Worker> selectedWorker = new();
    private Worker? workerInfo = new();
    private int countryid { get; set; } 
    private int coid { get; set; }
    private int cityid { get; set; }
    private int ciid { get; set; }
    private int professionid { get; set; }
    private int profid { get; set; }
    private int age { get; set; }
    Grid<Worker>? grid;




    private void SelectCountryId(int value)
    {
        coid = value;

    }
    private void SelectCityId(int value)
    {
        ciid = value;
    }
    private void SelectProfessionId(int value)
    {
        profid = value;
    }

    private async void WorkerPerId(int workerid)
    {
        workerInfo = await workerServices.GetTheWorkerService(workerid);
    }
    private async void  Filtrieren()
    {
        grid?.RefreshDataAsync();
    }


    protected override async Task OnInitializedAsync()
    {
        var age = 70;
        filteredInfo = (await workerServices.GetDataServiceAsync(countryid, cityid, professionid, age)).ToList();
        allCountries = (await workerServices.GetCountriesServiceAsync()).ToList();
        allCities = (await workerServices.GetCitiesServiceAsync()).ToList();
        allProfessions = (await workerServices.GetProfessionsServiceAsync()).ToList();
    }

    private async Task<GridDataProviderResult<Worker>> DataProvider(GridDataProviderRequest<Worker> request)
    {
        var age = 70;
        filteredInfo = (await workerServices.GetDataServiceAsync(countryid, cityid, professionid, age)).ToList();
        return await Task.FromResult(request.ApplyTo(filteredInfo));


    }

    private Task OnSelectedItemsChanged(HashSet<Worker> workers)
    {
        selectedWorker = workers is not null && workers.Any() ? workers : new();
        return Task.CompletedTask;
    }

}