@page "/"
@layout EmptyLayout
@using workerFilterAPI.Models
@using workerFilterUI.Components.Layout
@using workerFilterUI.Components.Services
@inject IWorkerServices workerServices





<head>
    <style>
        .grid-container {
            display: grid;
            grid-template-areas:
                'header header header header header header'
                'menu menu main main main main'
                'menu menu footer footer footer footer'
                gap:10px;
            paddding: 10px;
            background-color:aliceblue;
        }
    </style>
</head>
<body>
    <div class="grid-container" style="width:20%">
        <div class="item1">Filter</div>
        <div class="item2">
            Menu

            @if (allCountries == null)
            {
                <p>es lädt...</p>
            }
            else
            {

                <EditForm Model="@allCountries">
                    <label>Land</label>
                    <InputSelectNumber class="form-select" bind-value="allCountries"
                                       ValueChanged="@((int value) => SelectCountryId(value))"
                                       ValueExpression="@(() => coid)"
                                       Value="coid">

                        <option value="0" bind-:after="Filtrieren">alle</option>
                        @if (coid == 0)
                        {
                            countryid = 0;
                            _ = Filtrieren();
                        }

                        @foreach (var country in allCountries)
                        {
                            <option value="@country.CountryId"> @country.CountryName </option>
                            @if (country.CountryId == coid)
                            {
                                countryid = country.CountryId;
                                _ = Filtrieren();
                            }
                        }


                    </InputSelectNumber>
                </EditForm>

                <EditForm Model="allCities">
                    <label>Stadt</label>
                    <InputSelect class="form-select" bind-value="allCities"
                                 ValueChanged="@((int value) => SelectCityId(value))"
                                 ValueExpression="@(() => ciid)"
                                 Value="ciid">

                        <option value="0">alle</option>
                        @if (ciid == 0)
                        {
                            cityid = 0;

                        }

                        @foreach (var city in allCities)
                        {
                            <option value="@city.CityId">@city.CityName</option>
                            @if (city.CityId == ciid)
                            {
                                cityid = city.CityId;

                            }
                        }

                    </InputSelect>
                </EditForm>

                <EditForm Model="allProfessions">
                    <label>Beruf</label>
                    <InputSelect class="form-select" bind-value="allProfessions"
                                 ValueChanged="@((int value) => SelectProfessionId(value))"
                                 ValueExpression="@(() => profid)"
                                 Value="profid">

                        <option value="0">alle</option>
                        @if (profid == 0)
                        {
                            professionid = 0;

                        }

                        @foreach (var prof in allProfessions)
                        {
                            <option value="@prof.ProfessionId">@prof.ProfessionName</option>
                            @if (prof.ProfessionId == profid)
                            {
                                professionid = prof.ProfessionId;
                            }
                        }

                    </InputSelect>
                </EditForm>

            }


            <br />
            <Grid @ref="grid" TItem="Worker"
                  Class="table table-hover table-bordered table-striped"
                  DataProvider="DataProvider"
                  AllowSelection="true"
                  SelectionMode="GridSelectionMode.Single"
                  SelectedItemsChanged="OnSelectedItemsChanged"
                  Responsive="true">


                <GridColumn TItem="Worker" HeaderText="First Name" PropertyName="First Name" SortKeySelector="item => item.FirstName">@context.FirstName</GridColumn>
                <GridColumn TItem="Worker" HeaderText="Last Name" PropertyName="First Name" SortKeySelector="item => item.LastName"> @context.LastName</GridColumn>
            </Grid>

            <div>
                <ul>


                    @if (selectedWorker is not null)
                    {
                        @foreach (var item in selectedWorker)
                        {
                            var id = item.WorkerId;
                            <p>@id</p>
                        }
                    }
                </ul>
            </div>


        </div>

        <div class="item3">main</div>
        <div class="item4">Made by Mauricio Serrano</div>
    </div>

</body>


<br />










    







@code{
    private IEnumerable<Worker>? filteredInfo { get; set; }
    private IEnumerable<Country>? allCountries { get; set; }
    private IEnumerable<City>? allCities { get; set; }
    private IEnumerable<Profession>? allProfessions { get; set; }
    private HashSet<Worker> selectedWorker = new();
    private Worker? workerInfo = new();
    private int countryid { get; set; } 
    private int coid { get; set; }
    private int cityid { get; set; }
    private int ciid { get; set; }
    private int professionid { get; set; }
    private int profid { get; set; }
    private int age { get; set; }
    Grid<Worker>? grid;




    private void SelectCountryId(int value)
    {
        coid = value;

    }
    private void SelectCityId(int value)
    {
        ciid = value;
    }
    private void SelectProfessionId(int value)
    {
        profid = value;
    }
    private async Task Filtrieren()
    {
        await grid?.RefreshDataAsync();
    }

    private async void WorkerPerId(int workerid)
    {
        workerInfo = await workerServices.GetTheWorkerService(workerid);
    }




    protected override async Task OnInitializedAsync()
    {
        var age = 70;
        filteredInfo = (await workerServices.GetDataServiceAsync(countryid, cityid, professionid, age)).ToList();
        allCountries = (await workerServices.GetCountriesServiceAsync()).ToList();
        allCities = (await workerServices.GetCitiesServiceAsync()).ToList();
        allProfessions = (await workerServices.GetProfessionsServiceAsync()).ToList();
    }

    private async Task<GridDataProviderResult<Worker>> DataProvider(GridDataProviderRequest<Worker> request)
    {
        var age = 70;
        filteredInfo = (await workerServices.GetDataServiceAsync(countryid, cityid, professionid, age)).ToList();
        return await Task.FromResult(request.ApplyTo(filteredInfo));


    }

    private Task OnSelectedItemsChanged(HashSet<Worker> workers)
    {
        selectedWorker = workers is not null && workers.Any() ? workers : new();
        return Task.CompletedTask;
    }

}