@page "/"
@layout EmptyLayout
@using workerFilterAPI.Models
@using workerFilterUI.Components.Layout
@using workerFilterUI.Components.Services
@inject IWorkerServices workerServices




<div class="container">
    @if (allCountries == null)
    {
        <p>es lädt...</p>
    }
    else
    {
       <EditForm Model="@allCountries" >
           <label>Land</label>
           <InputSelectNumber class="form-select" bind-value="allCountries"
                        ValueChanged="@((int value) => SelectCountryId(value))"
                        ValueExpression="@(() => coid)"
                        Value="coid">

                        <option value="0">alle</option>
                        @if (coid == 0)
                        {
                            countryid = 0;
                            grid?.RefreshDataAsync();
                        }

                        @foreach (var country in allCountries)
                        {
                            <option value="@country.CountryId" > @country.CountryName </option>
                            @if (country.CountryId == coid)
                            {
                                countryid=country.CountryId;
                                grid?.RefreshDataAsync();

                            }
                        }

            </InputSelectNumber>
       </EditForm>

        <br />


        <EditForm Model="allCities">
            <label>Stadt</label>
            <InputSelect class="form-select" bind-value="filteredInfo"
                               ValueChanged="@((int value) => SelectCityId(value))"
                               ValueExpression="@(() => ciid)"
                               Value="ciid">

                <option value="0">alle</option>
                @if (ciid == 0)
                {
                    cityid = 0;
                    grid?.RefreshDataAsync();
                }

                @foreach (var city in allCities)
                {
                    <option value="@city.CityId">@city.CityName</option>
                    @if (city.CityId==ciid)
                    {
                        cityid = city.CityId;
                        grid?.RefreshDataAsync();
                    }
                }

            </InputSelect>
        </EditForm>

        <EditForm Model="allProfessions">
            <label>Beruf</label>
            <InputSelect class="form-select" bind-value="filteredInfo"
                         ValueChanged="@((int value) => SelectProfessionId(value))"
                         ValueExpression="@(() => profid)"
                         Value="profid">

                <option value="0">alle</option>
                @if (profid == 0)
                {
                    professionid = 0;
                    grid?.RefreshDataAsync();
                }

                @foreach (var prof in allProfessions)
                {
                    <option value="@prof.ProfessionId">@prof.ProfessionName</option>
                    @if (prof.ProfessionId == profid)
                    {
                        professionid = prof.ProfessionId;
                        grid?.RefreshDataAsync();
                    }
                }

            </InputSelect>
        </EditForm>

@*         <EditForm>
            <label>jünger als:</label>
            <select>
                <option value="0">70</option>
                <option value="1">60</option>
                <option value="2">50</option>
                <option value="3">40</option>
                <option value="4">30</option>

            </select>

        </EditForm> *@
    }

</div>

<br />

<div class="container" style="width:30% ">
    <Grid @ref= "grid" TItem="Worker"
            Class="table table-hover table-bordered table-striped"
            DataProvider="DataProvider"
            AllowSelection="true"
            SelectedItemsChanged="OnSelectedItemsChanged"
            Responsive="true"
            PageSizeSelectorItems="@(new int[]{5})"
            ItemsPerPageText="default"
            PaginationItemsTextFormat="default">

        <GridColumn TItem="Worker" HeaderText="First Name"  >@context.FirstName</GridColumn>
        <GridColumn TItem="Worker" HeaderText="Last Name"  > @context.LastName</GridColumn>
    </Grid>


</div>




    







@code{
    private IEnumerable<Worker>? filteredInfo { get; set; }
    private IEnumerable<Country>? allCountries { get; set; }
    private IEnumerable<City>? allCities { get; set; }
    private IEnumerable<Profession>? allProfessions { get; set; }
    private HashSet<Worker> selectedWorker = new();
    private int countryid { get; set; } 
    private int coid { get; set; }
    private int cityid { get; set; }
    private int ciid { get; set; }
    private int professionid { get; set; }
    private int profid { get; set; }
    private int age { get; set; }
    Grid<Worker>? grid;




    private void SelectCountryId(int value)
    {
        coid = value;     
    }
    private void SelectCityId(int value)
    {
        ciid = value;
    }
    private void SelectProfessionId(int value)
    {
        profid = value;
    }


    protected override async Task OnInitializedAsync()
    {
        var age = 70;
        filteredInfo = (await workerServices.GetDataServiceAsync(countryid, cityid, professionid, age)).ToList();
        allCountries = (await workerServices.GetCountriesServiceAsync()).ToList();
        allCities = (await workerServices.GetCitiesServiceAsync()).ToList();
        allProfessions = (await workerServices.GetProfessionsServiceAsync()).ToList();
    }

    private async Task<GridDataProviderResult<Worker>> DataProvider(GridDataProviderRequest<Worker> request)
    {
        var age = 70;
        filteredInfo = (await workerServices.GetDataServiceAsync(countryid, cityid, professionid, age)).ToList();
        return await Task.FromResult(request.ApplyTo(filteredInfo));


    }

    private Task OnSelectedItemsChanged(HashSet<Worker> workers)
    {
        selectedWorker = workers is not null && workers.Any() ? workers : new();
        return Task.CompletedTask;
    }

}